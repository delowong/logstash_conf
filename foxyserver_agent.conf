input {
  file {
    path => "/home/nemo/data/foxy_logs/foxyserver.log.8???"
  }

}

filter {
  if "timeweight" in [message] {
    ruby {
      code => "event['split_message'] = event['message'].split('append((', 2).last;event['host'] = event['host'].split('.').first;"
    }
    kv{
      field_split => ","
      value_split => ",:"
      trim => " (){}\[\]'"
      trimkey => " (){}\[\]'"
      source => "split_message"
      remove_field => "split_message"
    }
    mutate {
      add_tag => [ "kpi" ]
      convert => ["http_req" , "float"]
      convert => ["handle_req" , "float"]
      convert => ["start_request" , "float"]
      convert => ["start_time" , "float"]
      convert => ["gen_rsp" , "float"]
      convert => ["wait_network" , "float"]
      convert => ["ucweb_req" , "float"]
      convert => ["get_browser" , "float"]
      convert => ["query_cache" , "float"]
      convert => ["mainthread_queue" , "float"]
      convert => ["parse_data" , "float"]
      convert => ["wait_js" , "float"]
      convert => ["init_browser" , "float"]
      convert => ["main_page_loaded" , "float"]
      convert => ["wait_for_nosize_images" , "float"]
      convert => ["transform" , "float"]
      convert => ["get_images" , "float"]
      convert => ["imageCountReq" , "float"]
      convert => ["image_bad_count" , "float"]
      convert => ["image_block_count" , "float"]
      convert => ["image_count" , "float"]
      convert => ["image_size" , "float"]
      convert => ["miss_size" , "float"]
      convert => ["output_size" , "float"]
      convert => ["raw_size" , "float"]
      convert => ["req_size" , "float"]
      convert => ["sub_res" , "float"]
      convert => ["total_size" , "float"]
      convert => ["hashCountToClient" , "float"]
      convert => ["adblock" , "float"]
      convert => ["decode_response_time" , "float"]
      convert => ["hit_cache" , "float"]
      convert => ["hit_size" , "float"]
      convert => ["input_size" , "float"]
      convert => ["miss_cache" , "float"]
      convert => ["main_req_process_time" , "float"]
      convert => ["main_miss_size" , "float"]
      convert => ["url_transform_time" , "float"]
      convert => ["u3_transform_time" , "float"]
    }
  }
  else if "main thread start successful" in [message] {
    ruby {
      code => "event['host'] = event['host'].split('.').first"
    }
    mutate {
      add_tag => [ "restart" ]
    }
  }
  else {
    drop {}
  }
}

output {
  elasticsearch {
    host => "10.34.102.120"
    protocol => "node"
    index_type => "%{host}"
  }
}
